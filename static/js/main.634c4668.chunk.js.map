{"version":3,"sources":["components/InputSmoke.js","App.js","reportWebVitals.js","index.js"],"names":["InputSmoke","useState","id","text","names","setNames","inputText","setInputText","nextId","setNextId","onClick","nextNames","concat","namesList","map","name","useEffect","document","querySelectorAll","forEach","p","innerHTML","textContent","replace","letters","i","addEventListener","classList","add","length","className","value","onChange","e","target","onKeyPress","key","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8MA6DeA,EA1DI,WACjB,MAA0BC,mBAAS,CACjC,CAAEC,GAAI,EAAGC,KAAM,mBACf,CAAED,GAAI,EAAGC,KAAM,2BAFjB,mBAAOC,EAAP,KAAcC,EAAd,KAIA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA4BN,mBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KAGMC,EAAU,WACd,IAAMC,EAAYP,EAAMQ,OAAO,CAC7BV,GAAIM,EACJL,KAAMG,IAERG,EAAUD,EAAS,GACnBH,EAASM,GACTJ,EAAa,KASTM,EAAYT,EAAMU,KAAI,SAACC,GAAD,OAAU,4BAAkBA,EAAKZ,MAAfY,EAAKb,OAgBnD,OAdAc,qBAAU,WACGC,SAASC,iBAAiB,KAElCC,SAAQ,SAACC,GACVA,EAAEC,UAAYD,EAAEE,YAAYC,QAAQ,MAAO,sBAG7C,IADA,IAAMC,EAAUP,SAASC,iBAAiB,QAN5B,WAOLO,GACPD,EAAQC,GAAGC,iBAAiB,aAAa,WACvCF,EAAQC,GAAGE,UAAUC,IAAI,cAFpBH,EAAI,EAAGA,EAAID,EAAQK,OAAQJ,IAAM,EAAjCA,KAKR,CAACnB,IAGF,8BACE,sBAAKwB,UAAU,UAAf,UACE,iIACA,uBACEC,MAAOzB,EACP0B,SAvCS,SAACC,GAAD,OAAO1B,EAAa0B,EAAEC,OAAOH,QAwCtCI,WA7BW,SAACF,GACJ,UAAVA,EAAEG,KACJ1B,KA4BI2B,YAAY,uDAEd,wBAAQ3B,QAASA,EAAjB,0BACA,qBAAKoB,UAAU,SAAf,SAAyBjB,UChDlByB,EAJH,WACV,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASkC,eAAe,SAM1BZ,K","file":"static/js/main.634c4668.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./InputSmoke.scss\";\r\n\r\nconst InputSmoke = () => {\r\n  const [names, setNames] = useState([\r\n    { id: 1, text: \"No pain No gain\" },\r\n    { id: 2, text: \"Don't dream it, be it\" },\r\n  ]);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [nextId, setNextId] = useState(3);\r\n\r\n  const onChange = (e) => setInputText(e.target.value);\r\n  const onClick = () => {\r\n    const nextNames = names.concat({\r\n      id: nextId,\r\n      text: inputText,\r\n    });\r\n    setNextId(nextId + 1);\r\n    setNames(nextNames);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  const namesList = names.map((name) => <p key={name.id}>{name.text}</p>);\r\n\r\n  useEffect(() => {\r\n    const ps = document.querySelectorAll(\"p\");\r\n\r\n    ps.forEach((p) => {\r\n      p.innerHTML = p.textContent.replace(/\\S/g, \"<span>$&</span>\");\r\n    });\r\n    const letters = document.querySelectorAll(\"span\");\r\n    for (let i = 0; i < letters.length; i++) {\r\n      letters[i].addEventListener(\"mouseover\", () => {\r\n        letters[i].classList.add(\"active\");\r\n      });\r\n    }\r\n  }, [inputText]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"section\">\r\n        <h2>문장을 입력 후 마우스로 올려보세요!</h2>\r\n        <input\r\n          value={inputText}\r\n          onChange={onChange}\r\n          onKeyPress={onKeyPress}\r\n          placeholder=\"문장을 입력하세요.\"\r\n        />\r\n        <button onClick={onClick}>추가</button>\r\n        <div className=\"p-list\">{namesList}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputSmoke;\r\n","import React from \"react\";\nimport InputSmoke from \"./components/InputSmoke\";\n\nconst App = () => {\n  return <InputSmoke></InputSmoke>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}